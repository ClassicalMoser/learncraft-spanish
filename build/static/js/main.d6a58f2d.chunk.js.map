{"version":3,"sources":["QuickbaseTablesInfo.js","QuickbaseFetchFunctions.js","ExampleRetriever.js","Menu.js","QuizInterface.js","QuizInterfaceNoUpdate.js","SRSBuilder.js","SimpleQuizApp.js","LoginButton.js","LogoutButton.js","App.js","reportWebVitals.js","index.js"],"names":["qb","studentExamples","name","id","fields","students","vocabulary","examples","lessons","createHeaders","userToken","QB-Realm-Hostname","User-Agent","Authorization","Content-Type","printFields","json","console","log","createFieldsJSON","fieldNames","jsonFields","map","fieldName","str","replaceAll","split","word","index","toLowerCase","charAt","toUpperCase","slice","join","number","find","element","label","createTable2","data","linksArr","stringedJSON","link","parsedJSON","JSON","parse","forEach","value","fetchAndCreateTable","_x","_x2","_fetchAndCreateTable","apply","this","arguments","_callee","tableInitInfo","res","buffer","decoder","text","linkedFieldsToNumsArr","tableArr","_regeneratorRuntime","wrap","_context","prev","next","fetch","method","headers","body","stringify","tableID","from","select","sent","ok","arrayBuffer","TextDecoder","decode","abrupt","t0","stop","createBodyForUpdateStudentExample","recordID","lastReviewDate","reviewInterval","to","3","6","7","fieldsToReturn","createBodyForCreateStudentExample","exampleID","studentID","8","9","updateStudentExample","_x5","_x6","_x7","_x8","_updateStudentExample","_callee3","_context3","then","Promise","resolve","resBody","reject","Object","objectSpread","status","createStudentExample","_x9","_x10","_x11","_x12","_x13","_createStudentExample","_callee4","_context4","backendUrl","getVocabFromBackend","_getVocabFromBackend","_callee5","fetchUrl","tableFromBackend","_context5","concat","sort","a","b","frequencyRank","catch","err","getExamplesFromBackend","_getExamplesFromBackend","_callee6","_context6","getLessonsFromBackend","_getLessonsFromBackend","_callee7","_context7","sortReference","getStudentsFromBackend","_getStudentsFromBackend","_callee8","_context8","ExampleRetriever","tables","useRef","vocab","_useState","useState","_useState2","slicedToArray","filteredVocab","setFilteredVocab","_useState3","_useState4","customSearchVocab","setCustomSearchVocab","_useState5","_useState6","noSpanglish","setNoSpanglish","_useState7","_useState8","shuffledSentences","setShuffledSentences","filteredExamples","_useState9","_useState10","displayExamples","setDisplayExamples","handleRetrieveSentencesOnClick","e","preventDefault","vocabArr","selectedLesson","target","firstChild","filter1","current","selectedLessonName","lessonsTable","selectedLessonSortNumber","firstRefIncluded","lesson","combinedLessonVocab","toConsumableArray","vocabIncluded","retrieveCombinedLessonVocab","filter","example","length","_step","_iterator","_createForOfIteratorHelper","s","n","done","includes","f","filter2","examplesTable","_step2","_iterator2","_step3","parameterVocab","_iterator3","exampleVocab","filterExamplesLenient","filterExamplesHelper","filter3","spanglish","filter4","arr","shuffledArr","i","newIndex","Math","floor","random","oldValue","shuffleArray","createLoadingList","loadingList","push","vocabName","_init","asyncToGenerator","ExampleRetriever_regeneratorRuntime","mark","splitArrA","numA","parseInt","pop","titleA","splitArrB","numB","titleB","useEffect","init","react_default","createElement","className","onClick","window","location","onSubmit","type","onChange","key","title","copiedText","englishTranslation","spanishExample","navigator","clipboard","writeText","checked","htmlFor","disabled","Menu","_useAuth","useAuth0","isAuthenticated","user","isLoading","setStudentsTable","handleOnClick","pageName","URLSearchParams","search","get","linkStr","linkBase","href","Menu_regeneratorRuntime","queryParams","ut","stuTable","QuizInterface","currentIndex","setCurrentIndex","totalCompletedExamples","setTotalCompletedExamples","filteredStudentExamples","reviewIntervalIncrements","setReviewIntervalIncrements","showSpanish","setShowSpanish","todaysDate","Date","retrieveExamplesByStudent","filteredByStudentID","stuEx","relatedStudent","filteredByDateLogic","newDay","lastReviewedDate","setDate","getDate","pow","randomize20","QuizInterface_regeneratorRuntime","stuid","ex","relatedExample","recordId","reviewIntervalIncrement","changeCurrentIndex3","isIncrement","changeReviewIntervalIncrement","_changeReviewIntervalIncrement","_callee2","increment","newIncrement","updateInfo","_context2","toISOString","substring","prevState","newState","elem","toggleShowSpanish","handleKeyUp","keyCode","addEventListener","removeEventListener","style","textAlign","fontSize","padding","goBackToMenu","Fragment","color","bgColor","width","borderColor","backgroundColor","QuizInterfaceNoUpdate","QuizInterfaceNoUpdate_regeneratorRuntime","SRSBuilder","_useState11","_useState12","currentStudent","setCurrentStudent","_useState13","_useState14","selectAll","setSelectAll","setAllCheckboxes","isChecked","newDisplayExamples","selected","_handleAddChecked","SRSBuilder_regeneratorRuntime","hace2d","hace2dFormatted","_ref","exID","stuID","selectedSplitArr","selectedNum","selectedTitle","splitArr2","num2","SRSBuilder_createForOfIteratorHelper","filterSelected","rid","setOneCheckbox","fontWeight","handleAddChecked","student","hace10m","setMinutes","getMinutes","ridStyle","dateCreated","SimpleQuizApp","createStudentLoadingList","loadStatus","setloadStatus","quizReady","setQuizReady","examplesToReview","setExamplesToReview","currentExampleNumber","setCurrentExampleNumber","languageShowing","setLanguageShowing","playing","setPlaying","toggleQuizReady","_toggleLanguageShowing","SimpleQuizApp_regeneratorRuntime","filterByCurrentStudent","combinedTextStudentName","SimpleQuizApp_createForOfIteratorHelper","whichAudio","currentAudioUrl","display","randomizedQuizExamples","array","randomizedArray","vanishingArray","randIndex","randomArrayItem","splice","randomize","lib_default","src","LoginButton","loginWithRedirect","LogoutButton","logout","logoutParams","returnTo","origin","App","dist","src_LoginButton","src_LogoutButton","picture","alt","email","react_router_dist","exact","path","SRSBuilder_SRSBuilder","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","auth0_react_esm","domain","clientId","authorizationParams","redirect_uri","audience","scope","src_App"],"mappings":"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","file":"static/js/main.d6a58f2d.chunk.js","sourcesContent":["export const qb = { // quickbaseTablesInfo\n    // This is where all the quickbase table names used to make queries are hardcoded & stored\n    // these are used whenenever a page needs to retrieve, update, or create data on quickbase database\n    studentExamples: {\n        name: 'student-examples',\n        id: 'br3juud42',\n        fields: ['Record ID#', 'Last Reviewed Date', 'Review Interval', 'Related Student', 'Related example', 'Date Created']\n    },\n    students: {\n        name: 'students',\n        id: 'brrtdx784',\n        fields: ['Record ID#', 'Name']\n    },\n    vocabulary: {\n        name: 'vocabulary',\n        id: 'brrcdgyix',\n        fields: ['word/idiom', 'Vocab Name', 'frequency rank']\n    },\n    examples: {\n        name: 'examples',\n        id: 'brrcdgyjw',\n        fields: ['Record ID#', 'spanish example', 'english translation', 'vocab included', 'spanglish?']\n    },\n    lessons: {\n        name: 'Lessons',\n        id: 'brrtcungb',\n        fields: ['Lesson', 'Vocab Included', 'Sort Reference']\n        //fields: ['Lesson']\n    }\n}\n\n\n","import { qb } from './QuickbaseTablesInfo';\n// These are all the functions needed to access the data on the quickbase database\n// These get called whenever a page needs to retrieve, update, or create data on quickbase\n// Every request to quickbase requires a header & a body, so there are functions dedicated to just creating the header or the body\n\n// creates headers needed for querying data from quickbase\n// this is pretty much the same for each quickbase request\nfunction createHeaders(userToken) {\n    const headers = {\n        'QB-Realm-Hostname': 'masterofmemory.quickbase.com',\n        'User-Agent': 'NickApp',\n        'Authorization': userToken,\n        'Content-Type': 'application/json'\n    }\n    return headers\n}\n\n// creates body needed for querying data from quickbase\n// (if there's ever a case where the tables has more columns than 25, the \"select\" array will need to be increased)\nfunction createBody(tableID) {\n    return {\n        \"from\": tableID,\n        \"select\": [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],\n    }\n}\n\n// go thru each row of fields & print (mainly used for testing)  \nfunction printFields(json) { \n    console.log('Fields', json.fields)\n}\n\n// camelizes string and also removes special characters like #\n// for ex: converts 'Record ID#' to 'recordId', 'word/idiom' to 'wordIdiom', 'spanglish?' to 'spanglish'\nfunction camelize(str) {\n    const strArr = str.replaceAll(/[^\\w\\s]/gi, ' ')\n    const strArr2 = strArr.split(' ')\n    const camelArr = strArr2.map((word, index) => index === 0 ? word.toLowerCase(): word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n    return camelArr.join('')\n}\n\n// creates object that maps fieldNames to their corresponding numbers on quickbase database\n// essentially linking the fields names to the number they are associated with on quickbase\nfunction createFieldsJSON(fieldNames, jsonFields) {\n    const newArr = fieldNames.map(fieldName => {\n        return {\n            name: camelize(fieldName),\n            number: jsonFields.find(element => element.label.toLowerCase() === fieldName.toLowerCase()).id\n        }\n    })\n    //console.log('createFieldsJSON: ', newArr)\n    return newArr\n}\n// old version, only worked with vocab\nfunction createTable(data, linksArr) {\n    //console.log('creatTable')\n    return data.map(element => {\n        const stringedJSON = '{' +  linksArr.map(link => { return ('\\\"' + link.name + '\\\"' + ':' + '\\\"' + element[link.number].value.replaceAll('\"', '\\\\\\\"') + '\\\"')}).join(', ') + '}'\n        //console.log('stringedJSON: ', stringedJSON)\n        const parsedJSON = JSON.parse(stringedJSON)\n        \n        //console.log('parsedJSON: ', parsedJSON)\n        return parsedJSON\n    })\n}\n// new improved version that differentiates btwn array & string\n// creates the table object from the quickbase table\nfunction createTable2(data, linksArr) {\n    //console.log('creatTable')\n    return data.map(element => {\n        const stringedJSON = '{' +  linksArr.map(link => { return ('\\\"' + link.name + '\\\"' + ':' + null)}).join(', ') + '}'\n        //console.log('stringedJSON: ', stringedJSON)\n        const parsedJSON = JSON.parse(stringedJSON)\n        \n        //console.log('parsedJSON: ', parsedJSON)\n        linksArr.forEach(link => {\n            parsedJSON[link.name] = element[link.number].value\n        });\n        //console.log('parsedJSON2: ', parsedJSON)\n        return parsedJSON\n    })\n}\n\n// creates & returns tables object, which is what all the pages, like Example Retriever, use to get data from\nexport async function fetchAndCreateTable(userToken, tableInitInfo) {\n    try {\n        const res = await fetch('https://api.quickbase.com/v1/records/query',\n        {\n        method: 'POST',\n        headers: createHeaders(userToken),\n        body: JSON.stringify(createBody(tableInitInfo.id))\n        })\n        if(res.ok) {\n            // if database is ASCII\n            const buffer = await res.arrayBuffer()\n            const decoder = new TextDecoder('ASCII')\n            const text = decoder.decode(buffer)\n            const json = JSON.parse(text)\n\n            //console.log('json: ', json)\n\n            printFields(json) // don't delete\n\n            const linkedFieldsToNumsArr = createFieldsJSON(tableInitInfo.fields, json.fields)\n            const tableArr = createTable2(json.data, linkedFieldsToNumsArr)\n            return tableArr\n        }\n    } catch (err) {\n        console.log(err)\n    }\n}\n\n// test func\nfunction createBodyForUpdateTest(tableID) {\n    return {\n        \"to\": tableID,\n        \"data\": [\n            {\n                \"3\": { \"value\": \"3\" },\n                \"7\": { \"value\": \"5\"}\n            }\n        ],\n        \"fieldsToReturn\": [3, 6, 7, 8, 9]\n    }\n}\n\n// test func\nexport async function testUpdate(userToken, tableInitInfo) {\n    try {\n        const res = await fetch('https://api.quickbase.com/v1/records',\n        {\n        method: 'POST',\n        headers: createHeaders(userToken),\n        body: JSON.stringify(createBodyForUpdateTest(tableInitInfo.id))\n        })\n        if(res.ok) {\n            return res.json().then(res => console.log(res))\n        }\n        return res.json().then(resBody => Promise.reject({status: res.status, ...resBody}))\n    } catch (err) {\n        console.log(err)\n    }\n}\n\n// 3: RecordID\n// 6: Last Review Date\n// 7: Review Interval\n// This is a COPY/PASTE/EDIT of createBody()\n// but is used for updating data on Student Examples table, instead of just retrieving data\n// called by updateStudentExample()\nfunction createBodyForUpdateStudentExample(recordID, lastReviewDate, reviewInterval, tableID) {\n    return {\n        \"to\": tableID,\n        \"data\": [\n            {\n                \"3\": { \"value\": recordID },\n                \"6\": { \"value\": lastReviewDate },\n                \"7\": { \"value\": reviewInterval }\n            }\n        ],\n        \"fieldsToReturn\": [3, 6, 7, 8, 9]\n    }\n}\n\n// This is a COPY/PASTE/EDIT of createBody()\n// but is used for creating data on Student Examples table, instead of just retrieving data\n// called by createStudentExample()\nfunction createBodyForCreateStudentExample(exampleID, studentID, lastReviewDate, reviewInterval, tableID) {\n    return {\n        \"to\": tableID,\n        \"data\": [\n            {\n                //\"3\": { \"value\": recordID },\n                \"6\": { \"value\": lastReviewDate },\n                \"7\": { \"value\": reviewInterval },\n                \"8\": { \"value\": studentID },\n                \"9\": { \"value\": exampleID }\n            }\n        ],\n        \"fieldsToReturn\": [3, 6, 7, 8, 9]\n    }\n}\n\n\n\n// This is a COPY/PASTE/EDIT of fetchAndCreateTable()\n// used by the SRS Quiz interface to update the review interval when user rates example\nexport async function updateStudentExample(recordID, lastReviewDate, reviewInterval, userToken) {\n    try {\n        const res = await fetch('https://api.quickbase.com/v1/records',\n        {\n        method: 'POST',\n        headers: createHeaders(userToken),\n        body: JSON.stringify(createBodyForUpdateStudentExample(recordID, lastReviewDate, reviewInterval, qb.studentExamples.id))\n        })\n        if(res.ok) {\n            //return res.json().then(res => console.log(res))\n            return res.json().then(res => Promise.resolve(res))\n        }\n        return res.json().then(resBody => Promise.reject({status: res.status, ...resBody}))\n    } catch (err) {\n        console.log(err)\n    }\n}\n\n// This is a COPY/PASTE/EDIT of fetchAndCreateTable()\n// used by the SRSBuilder.js, to add examples to the student examples table that will be used for the corresponding student in the SRS quiz interface.\nexport async function createStudentExample(exampleID, studentID, lastReviewDate, reviewInterval, userToken) {\n    try {\n        const res = await fetch('https://api.quickbase.com/v1/records',\n        {\n        method: 'POST',\n        headers: createHeaders(userToken),\n        body: JSON.stringify(createBodyForCreateStudentExample(exampleID, studentID, lastReviewDate, reviewInterval, qb.studentExamples.id))\n        })\n        if(res.ok) {\n            //return res.json().then(res => console.log(res))\n            return res.json().then(res => Promise.resolve(res))\n        }\n        return res.json().then(resBody => Promise.reject({status: res.status, ...resBody}))\n    } catch (err) {\n        console.log(err)\n    }\n}\n\n//const backendUrl = 'http://localhost:8000/'\nconst backendUrl = 'https://as-vocab-backend.herokuapp.com/'\n\nexport async function getVocabFromBackend() {\n    let fetchUrl = `${backendUrl}qb-vocabulary`\n\n    //console.log(`Fetching ${fetchUrl}`)\n\n    const tableFromBackend = await fetch(fetchUrl,{method:'GET'})\n    .then((res) => {\n        if(res.ok){\n            return res.json().then((res) => {\n                function sortFunction (a,b){\n                    if(a.frequencyRank > b.frequencyRank){\n                        return 1;\n                    }\n                    if(a.frequencyRank < b.frequencyRank){\n                        return -1;\n                    }\n                    return 0\n                }\n                const data = JSON.parse(res);\n                data.sort(sortFunction);\n                //console.log(data);\n                return data;\n            }) \n        }\n        \n    })\n    .catch(err => console.log(err))\n\n    return tableFromBackend\n    \n}\n\nexport async function getExamplesFromBackend() {\n    let fetchUrl = `${backendUrl}qb-examples`\n\n    //console.log(`Fetching ${fetchUrl}`)\n\n    const tableFromBackend = await fetch(fetchUrl,{method:'GET'})\n    .then((res) => {\n        if(res.ok){\n            return res.json().then((res) => {\n                const data = JSON.parse(res);\n                return data;\n            }) \n        }\n    })\n    .catch(err => console.log(err))\n    \n    return tableFromBackend;\n}\n\nexport async function getLessonsFromBackend() {\n    let fetchUrl = `${backendUrl}qb-lessons`\n\n    //console.log(`Fetching ${fetchUrl}`)\n\n    const tableFromBackend = await fetch(fetchUrl,{method:'GET'})\n    .then((res) => {\n        if(res.ok){\n            return res.json().then((res) => {\n                function sortFunction (a,b){\n                    if(a.sortReference > b.sortReference){\n                        return 1;\n                    }\n                    if(a.sortReference < b.sortReference){\n                        return -1;\n                    }\n                    return 0\n\n                }\n                const data = JSON.parse(res);\n                data.sort(sortFunction);\n                //console.log(data);\n                return data;\n            }) \n        }\n    })\n    .catch(err => console.log(err))\n    \n    return tableFromBackend;\n}\n\nexport async function getStudentsFromBackend() {\n    let fetchUrl = `${backendUrl}qb-students`\n\n    //console.log(`Fetching ${fetchUrl}`)\n\n    const tableFromBackend = await fetch(fetchUrl,{method:'GET'})\n    .then((res) => {\n        if(res.ok){\n            return res.json().then((res) => {\n                const data = JSON.parse(res);\n                //data.sort(sortFunction);\n                return data;\n            }) \n        }\n    })\n    .catch(err => console.log(err))\n    \n    return tableFromBackend;\n}","import React, {useState, useEffect, useRef} from 'react';\nimport { qb } from './QuickbaseTablesInfo';\nimport { fetchAndCreateTable, getVocabFromBackend, getExamplesFromBackend, getLessonsFromBackend} from './QuickbaseFetchFunctions';\nimport './App.css';\n\n// This script displays the Database Tool (Example Retriever), where coaches can lookup example sentences on the database by vocab word\nexport default function ExampleRetriever() {\n  // stores data of tables\n  const tables = useRef({ vocab: [], lessons: [] })\n  // vocab related variables\n  // array of suggested vocab that shows up under search bar & changes whenever a user types something in the search bar\n  const [filteredVocab, setFilteredVocab] = useState([])\n  // array of vocab that user builds, which is then used to filter example sentences\n  const [customSearchVocab, setCustomSearchVocab] = useState([])\n\n  // examples related variables\n  const [noSpanglish, setNoSpanglish] = useState(false)\n  const [shuffledSentences, setShuffledSentences] = useState(false)\n  // array of examples, stores the first part of the filtering\n  const filteredExamples = useRef([])\n  // array of examples that are displayed, does the 2nd part of the filtering\n  // it is split into 2 separate variables in order to avoid redundancy\n  const [displayExamples, setDisplayExamples] = useState([])\n\n  function goBackToMenu(e) {\n    e.preventDefault();\n    const link = '#/Menu/';\n    window.location=link;\n}\n\n  \n  // called when user clicks 'Retrieve Sentences' button on top right of page\n  // makes the page display the filtered example sentences on the bottom of page\n  function handleRetrieveSentencesOnClick(e) {\n    e.preventDefault() // prevents page from refreshing\n    const selectedLesson = e.target.firstChild.value // gets selected value in dropdown list of lessons\n    // if selected lesson is '' display all examples,\n    // else \n    const filter1 = selectedLesson === '' ? tables.current.examples : filterExamplesStrict(retrieveCombinedLessonVocab(selectedLesson, tables.current.lessons), tables.current.examples)\n    const filter2 = filterExamplesLenient(customSearchVocab, filter1)\n    filteredExamples.current = filter2\n    filterExamplesHelper()\n  }\n\n  // helper function called by handleRetrieveSentencesOnClick()\n  // returns an array of all lessons with same title and lower/equal lesson number\n  // for example: AS Lesson 3 will return ['AS Lesson 1', 'AS Lesson 2', 'AS Lesson 3']\n  /*function oldRetrieveCombinedLessonVocab(selectedLessonName, lessonsTable) {\n    const selectedSplitArr = selectedLessonName.split(' ');\n    const selectedCourseName = selectedSplitArr(0);\n  if(selectedCourseName === '2mc'){\n\n  } else {\n    const selectedNum = parseInt(selectedSplitArr.pop())\n    const selectedTitle = selectedSplitArr.join(' ')\n\n    let combinedLessonVocab = []\n    lessonsTable.forEach(lesson => {\n        const splitArr2 = lesson.lesson.split(' ')\n        const num2 = parseInt(splitArr2.pop())\n        if(lesson.lesson.includes(selectedTitle) && num2 <= selectedNum) {\n            combinedLessonVocab = [...combinedLessonVocab, ...lesson.vocabIncluded]\n        }\n    })\n    return combinedLessonVocab}\n  }*/\n\n  function retrieveCombinedLessonVocab (selectedLessonName, lessonsTable) {\n    let selectedLessonSortNumber;\n\n    lessonsTable.forEach((lesson) => {\n      if (lesson.lesson === selectedLessonName) {\n        selectedLessonSortNumber = lesson.sortReference\n      }\n    })\n\n    let firstRefIncluded\n    if (selectedLessonSortNumber > 12) {\n      firstRefIncluded = 13\n    } else {\n      firstRefIncluded = 1\n    }\n    let combinedLessonVocab = []\n    lessonsTable.forEach((lesson) => {\n      if(lesson.sortReference <= selectedLessonSortNumber && lesson.sortReference >= firstRefIncluded) {\n        combinedLessonVocab = [...combinedLessonVocab, ...lesson.vocabIncluded]\n    }\n    })\n    //console.log(combinedLessonVocab);\n    return combinedLessonVocab;\n  }\n\n  // helper function called by handleRetrieveSentencesOnClick()\n  // returns filtered array of examples by vocab with a strict filter\n  // meaning each example MUST include all vocab in vocabArr\n  function filterExamplesStrict(vocabArr, examplesTable) {\n    const filteredExamples = examplesTable.filter(example => {\n        if(example.vocabIncluded.length == 0) {\n            return false\n        }\n        for(const vocab of example.vocabIncluded) {\n            if(!vocabArr.includes(vocab)) {\n                return false\n            }\n        }\n        return true\n    })\n    return filteredExamples\n  }\n\n  // helper function called by handleRetrieveSentencesOnClick()\n  // returns filtered array of examples by vocab with a lenient filter\n  // meaning as long as the example contains at least one of the vocab in vocabArr, then the example will be in the returned array\n  function filterExamplesLenient(vocabArr, examplesTable) {\n      const filteredExamples = vocabArr.length === 0 ? examplesTable : examplesTable.filter(example => {\n          for(const parameterVocab of vocabArr) {\n              for(const exampleVocab of example.vocabIncluded) {\n                  if(exampleVocab.toLowerCase().includes(parameterVocab.toLowerCase())) {\n                      return true\n                  }\n              }\n          }\n          return false\n      })\n      return filteredExamples\n  }\n\n  // helper function called by handleRetrieveSentencesOnClick() & the 2nd useEffect() below\n  // checks if noSpanglish & shuffleSentences and then sets the displayExamples\n  function filterExamplesHelper() {\n    const filter2 = filteredExamples.current\n    const filter3 = noSpanglish ? filter2.filter(example => example.spanglish === 'esp') : filter2\n    const filter4 = shuffledSentences ? shuffleArray(filter3) : filter3\n    setDisplayExamples(filter4)\n  }\n\n  // helper function called by filterExamplesHelper()\n  // returns a shuffled array of examples array in parameter \n  function shuffleArray(arr) {       \n    const shuffledArr = [...arr]\n    for(let i = shuffledArr.length; i > 0; i--) {\n        const newIndex = Math.floor(Math.random() * (i - 1))\n        const oldValue = shuffledArr[newIndex]\n        shuffledArr[newIndex] = shuffledArr[i - 1]\n        shuffledArr[i - 1] = oldValue\n    }\n    return shuffledArr\n  }\n\n  // called when user clicks 'Copy as List' button\n  // copies sentences in a list format with all english sentences first & then all spanish sentences\n  function copySentences() {\n    const englishSentences = displayExamples.map(example => {\n        return example.englishTranslation\n    }).join('\\n')\n    const spanishSentences = displayExamples.map(example => {\n        return example.spanishExample\n    }).join('\\n')\n    //\n    const copiedText = englishSentences + '\\n\\n' + spanishSentences\n    navigator.clipboard.writeText(copiedText)\n  }\n\n  // called when user clicks 'Copy as Table' button\n  // copies sentences in a table format to be pasted into a google doc or excel sheet\n  function copyTable() {\n    const headers = 'Spanish\\tEnglish\\n'\n    const table = displayExamples.map(example => {\n        return example.spanishExample + '\\t' + example.englishTranslation\n    }).join('\\n')\n\n    const copiedText = headers + table\n    navigator.clipboard.writeText(copiedText)\n  }\n\n  function createLoadingList () {\n    const loadingList = []\n    for (let i=0;i < 20;i++) {\n      loadingList.push({vocabName: 'Loading Suggestions...'})\n    }\n    return loadingList;\n  }\n\n  // called by 1st useEffect(), when first loading the page\n  // gets user token & retrieves all table data & stores it into tables variable\n  // to set up all needed variables\n  async function init() {\n    // getting the user token\n    console.log('init called')\n    // retrieving the table data\n    setFilteredVocab(createLoadingList())\n    tables.current.vocab = await getVocabFromBackend();\n    \n    tables.current.examples = await getExamplesFromBackend();\n    \n    console.log('lessons fetching')\n    tables.current.lessons = await getLessonsFromBackend();\n    console.log('lessons fetched')\n    // this logic below sorts the lesssons in order by number\n    tables.current.lessons.sort((a, b)=>{\n      const splitArrA = a.lesson.split(' ')\n      const numA = parseInt(splitArrA.pop())\n      const titleA = splitArrA.join(' ')\n\n      const splitArrB = b.lesson.split(' ')\n      const numB = parseInt(splitArrB.pop())\n      const titleB = splitArrB.join(' ')\n      console.log('init finished')\n      return titleA === titleB ? numA - numB : titleA - titleB\n    })\n    //console.log('lessons')\n    //console.log(tables.current.lessons[12]);\n    setFilteredVocab(tables.current.vocab)\n  }\n\n  // called onced at the beginning\n  useEffect(() => {       \n    init() \n    //console.log(tables)       \n}, [tables])\n\n  // called everytime user clicks the checkbox for noSpanish or shuffleSentences\n  useEffect(() => {\n    if(tables.current.lessons.length !== 0) {\n    filterExamplesHelper()\n    }\n  }, [noSpanglish, shuffledSentences])\n\n  return <div>\n      <div className='div-header'>\n        <h1>Example Lookup</h1>\n        <div className='returnButton'><button onClick={goBackToMenu}>{'< Back to Menu'}</button></div>\n      </div>\n      <div className='div-vocab'>\n        {/* Top left section--------------------------------------------------------------------------- */}\n        <div className='div-vocab-left'>\n          <div className='div-vocab-left-header'>    \n            <form onSubmit={(e) => {\n              e.preventDefault()\n              setCustomSearchVocab([...customSearchVocab, e.target.firstChild.value])\n              e.target.firstChild.value = ''\n              setFilteredVocab(tables.current.vocab)\n            }}>    \n              <input className='search' type='text' onChange={(e)=>setFilteredVocab(tables.current.vocab.filter(vocab => vocab.vocabName.toLowerCase().includes(e.target.value.toLowerCase())))}></input>\n              <button className='add-to-search-query'>Add to Search {'>'} </button>\n            </form>\n          </div>\n          <ul className='suggestions'>\n            {filteredVocab.map((vocab, id) => {\n                return (<li key={id} onClick={(e) => setCustomSearchVocab([...customSearchVocab, vocab.vocabName])}>{vocab.vocabName}</li>)\n            })}\n          </ul>\n        </div>\n        {/* Top right section---------------------------------------------------------------------------- */}\n        <div className='div-vocab-right'>\n          <div className='div-vocab-right-header'>\n            <form onSubmit={(e)=>handleRetrieveSentencesOnClick(e)}>\n              <select className='lesson-select'>\n                <option value=''>No lesson filter</option>\n                {/*lessonTitleSelect.options.map((option, id) => (<option key={id} title={createLessonTitle(option)}>{option}</option>))*/\n                tables.current.lessons.map((lesson, id)=>(<option key={id} title={lesson.vocabIncluded.join('\\n')}>{lesson.lesson}</option>))\n                }\n                {console.log('rerendering lessons')}\n              </select>\n              <button className='retrieve-sentences'>Retrieve Sentences</button>\n            </form>\n          </div>\n          <div>\n            {customSearchVocab.map((vocab, id) => (<button key={id} className='custom-vocab' onClick={(e)=>setCustomSearchVocab(customSearchVocab.filter(vocab=>vocab!==e.target.value))} value={vocab}>{vocab}</button>))}\n          </div>\n        </div>\n      </div>\n      {/* Mid section with the copy buttons------------------------------------------------------------------ */}\n      <div className='div-examples-header'>\n        <div>\n          <button onClick={copySentences}>Copy as List</button>\n          <button onClick={copyTable}>Copy as Table</button>\n          <input type='checkbox' name='spanglishCheckbox' onChange={(e) => setNoSpanglish(e.target.checked)}></input><label htmlFor='spanglishCheckbox'>No Spanglish? </label>\n          <input type='checkbox' name='shuffledCheckbox'  onChange={(e) => setShuffledSentences(e.target.checked)}></input><label htmlFor='shuffledCheckbox'>Shuffle Sentences? </label>\n        </div>\n        <div>Num of Results: {displayExamples.length}</div>\n      </div>\n      {/* Bottom section with list of examples-------------------------------------------------------------- */}\n      <div className='div-examples'>\n        <table>\n          <thead>\n            <tr>\n              <th>Spanish</th>\n              <th>English</th>\n              <th>Vocab/Idioms</th>\n            </tr>\n          </thead>\n          <tbody>\n            { displayExamples.map((example, id) => {\n              return(<tr key={id}>\n                <td>{example.spanishExample}</td>\n                <td>{example.englishTranslation}</td>\n                <td>{example.vocabIncluded.map((vocab, id) => {\n                    return(<button key={id} className='vocab-included-button' disabled>{vocab}</button>)\n                })}</td>\n              </tr>)\n            })}\n          </tbody>\n        </table>\n      </div>\n  </div>;\n}\n","import React, {useState, useRef, useEffect} from 'react'\nimport { qb } from './QuickbaseTablesInfo';\nimport { fetchAndCreateTable } from './QuickbaseFetchFunctions';\nimport './App.css'\nimport { useAuth0 } from \"@auth0/auth0-react\";\n\n// this script displays the Menu page, where user can access\n// - Database tool (Example Retriever)\n// - old Database tool\n// - SRS Builder\n// - SRS Quiz Platform (Quiz Interface)\n// - SRS Quiz Platform Version that does not update database\nexport default function Menu() {\n    const { user, isAuthenticated, isLoading } = useAuth0();\n    //const tables = useRef({ students: [] })\n    const [studentsTable, setStudentsTable] = useState([])\n    const [currentStudent, setCurrentStudent] = useState(3)\n\n    // called whenever user clicks a button\n    // redirects user to appropriate page\n    function handleOnClick(pageName) {\n        const queryParams = new URLSearchParams(window.location.search)\n        const ut = queryParams.get('ut')\n        //const linkBase = 'http://localhost:3000'\n        const linkBase = 'https://app-lcs.s3.us-east-2.amazonaws.com/index.html'\n        const linkStr = linkBase + '#/' + pageName\n        //console.log(linkStr)\n        window.location.href = (\n            //'http://localhost:3000/',\n            linkStr\n        )\n    }\n\n    // called by useEffect() when loading\n    // gets user token & initializes tables data\n    async function init() {\n        const queryParams = new URLSearchParams(window.location.search)\n        const ut = queryParams.get('ut')\n        if (ut) {\n            const stuTable =  await fetchAndCreateTable(ut, qb.students)\n            setStudentsTable(stuTable)\n            console.log('students')\n        }\n      }\n    // called once in the beginning\n    useEffect(() => {       \n        init() \n        //console.log(tables)       \n    }, [])\n  return (\n    isAuthenticated && (\n    <div>\n        <h2>App Options:</h2>\n        <div className= 'menu-buttons'>\n            <button onClick={()=>handleOnClick('ExampleRetriever')}>Example Lookup</button>\n            <button onClick={()=>handleOnClick('SimpleQuizApp')}>Quizzing App</button>\n        </div>\n    </div>\n  ))\n}\n\n/*<h2>SRS Quiz Interface</h2>\n        <div className='div-examples-header'>\n        <div>\n            <select style={{'padding': '8px'}} value={currentStudent} onChange={(e)=>setCurrentStudent(parseInt(e.target.value))}>\n                {studentsTable.map((student, id) => (<option key={student.recordId} value={student.recordId}>{student.name}</option>))}\n            </select>\n            <button onClick={()=>handleOnClick('QuizInterface')} style={{'fontWeight': 'bold'}} title='This uses the SRS logic & will update the DB'>Interface with SRS Logic</button>\n            <button onClick={()=>handleOnClick('QuizInterfaceNoUpdate')} style={{'fontWeight': 'bold'}} title='This does not use the SRS logic & will not update the DB'>Interface only</button>\n        </div>\n        </div>*/\n","import React, {useState, useRef, useEffect, useCallback} from 'react'\nimport { qb } from './QuickbaseTablesInfo';\nimport { fetchAndCreateTable, updateStudentExample } from './QuickbaseFetchFunctions';\n\n// related student 8\n// related example 9\n// last reviewed date 6\n// review interval 7\n\n// This script displays the SRS Quiz Tool (Quiz Interface)\n// where user go throughs 20 example sentences & then rates their difficulty\nexport default function QuizInterface() {\n    const tables = useRef({ studentExamples: [], examples: [] })\n\n    const [currentIndex, setCurrentIndex] = useState(-1)\n    const [totalCompletedExamples, setTotalCompletedExamples] = useState(0)\n    const filteredStudentExamples = useRef([])\n    const [reviewIntervalIncrements, setReviewIntervalIncrements] = useState([])\n    const [showSpanish, setShowSpanish] = useState(false)\n    const todaysDate = new Date()\n\n    // get all the student examples that belong to student with studentID & that have last review date earlier than today's date - review interval squared\n    // called by init()\n    function retrieveExamplesByStudent(studentID, studentExamples, examples) {\n        const filteredByStudentID = studentExamples.filter(stuEx => stuEx.relatedStudent === studentID)\n        console.log('filteredByStudentID', filteredByStudentID)\n        const filteredByDateLogic = filteredByStudentID.filter(stuEx => {\n            const today = new Date()\n            const newDay = new Date(stuEx.lastReviewedDate)\n            newDay.setDate(newDay.getDate() + parseInt(Math.pow(2, stuEx.reviewInterval)))\n            return todaysDate >= newDay\n        })\n        console.log('filteredByDateLogic', filteredByDateLogic)\n        return filteredByDateLogic\n    }\n\n    // grabs the 1st 20 examples of shuffled array\n    // called by init()\n    function randomize20(studentExamples) {\n        return shuffleArray(studentExamples).filter((stuEx, index)=>index<20)\n        //return studentExamples\n    }\n\n    // returns a shuffled version of examples array passed in\n    // called by randomize20()\n    function shuffleArray(arr) {        \n        const shuffledArr = [...arr]   \n        for(let i = shuffledArr.length; i > 0; i--) {\n            const newIndex = Math.floor(Math.random() * (i - 1))\n            const oldValue = shuffledArr[newIndex]\n            shuffledArr[newIndex] = shuffledArr[i - 1]\n            shuffledArr[i - 1] = oldValue\n        }\n        return shuffledArr\n    }\n\n    // gets user token & retrieves table data\n    async function init() {\n        const queryParams = new URLSearchParams(window.location.search)\n        const ut = queryParams.get('ut')\n        let stuid = queryParams.get('stuid')\n        if(stuid === null) {\n            stuid = 2\n        } else {\n            stuid = parseInt(stuid)\n        }\n\n        console.log('stuid:  ', stuid)      \n        tables.current.studentExamples = await fetchAndCreateTable(ut, qb.studentExamples)\n        console.log('student examples')\n        tables.current.examples = await fetchAndCreateTable(ut, qb.examples)\n        console.log('example')\n        console.log('tables: ', tables.current)\n        filteredStudentExamples.current = randomize20(retrieveExamplesByStudent(stuid, tables.current.studentExamples, tables.current.examples))\n        console.log('length of filStuEx: ', filteredStudentExamples.current.length)\n\n        tables.current.examples.forEach(ex => \n            {\n                filteredStudentExamples.current.forEach(stuEx => {\n                    if(stuEx.relatedExample === ex.recordId) {\n                        stuEx.spanishExample = ex.spanishExample\n                        stuEx.englishTranslation = ex.englishTranslation\n                        stuEx.reviewIntervalIncrement = 0\n                    }\n                })\n            })\n        console.log('check', filteredStudentExamples.current)\n        if(filteredStudentExamples.current.length != 0) {\n            setReviewIntervalIncrements(filteredStudentExamples.current.map(stuEx => stuEx.reviewIntervalIncrement))\n            setCurrentIndex(0)\n            //window.addEventListener('keyup', handleKeyUp)\n        } else {\n            setCurrentIndex(-2)\n        }\n      }\n\n\n/*\n    // OLD Version not in use anymore\n    function changeCurrentIndexOLD(index, isIncrement) {\n        if(index <= totalCompletedExamples || isIncrement) {\n            setCurrentIndex(prevState => {\n                let newIndex = index\n                if(totalCompletedExamples < filteredStudentExamples.current.length) {\n                    if(newIndex < 0) {\n                        newIndex = totalCompletedExamples // filteredStudentExamples.current.length - 1\n                    } else if(newIndex > totalCompletedExamples && isIncrement) { //} filteredStudentExamples.current.length - 1) {\n                        newIndex = 0\n                    }\n                } else {\n                    if(newIndex < 0) {\n                        newIndex = totalCompletedExamples - 1\n                    } else if(newIndex > totalCompletedExamples - 1) { //} filteredStudentExamples.current.length - 1) {\n                        newIndex = 0\n                    }\n                }\n                return newIndex\n            })\n            if(reviewIntervalIncrements[index] === 0) {\n                setShowSpanish(false)\n            } else {\n                setShowSpanish(true)\n            }\n        }\n    }\n    // this previous function used to allow the user to loop to beginning when user moved past current limit before complete all questions\n    // but this functionality was removed\n    function changeCurrentIndex2(index, isIncrement) { \n        if(index <= totalCompletedExamples || isIncrement) {\n            let newIndex = index\n            const highestIndex = totalCompletedExamples < filteredStudentExamples.current.length ? totalCompletedExamples : totalCompletedExamples - 1\n            if(newIndex < 0) {\n                newIndex = highestIndex // filteredStudentExamples.current.length - 1\n            } else if(newIndex > highestIndex && isIncrement) { //} filteredStudentExamples.current.length - 1) {\n                newIndex = 0\n            }\n            setCurrentIndex(newIndex)\n            setShowSpanish(reviewIntervalIncrements[newIndex] !== 0)\n        }\n    }\n*/\n    // called when user clicks LEFT/RIGHT arrow key or clicks PREV/NEXT buttons or clicks on timeline\n    // switches the current example to previous or next\n    function changeCurrentIndex3(index, isIncrement) {\n        let newIndex = index\n        if(totalCompletedExamples == filteredStudentExamples.current.length) {\n            if(newIndex < 0) {\n                newIndex = filteredStudentExamples.current.length - 1\n            } else if(newIndex > filteredStudentExamples.current.length - 1) {\n                newIndex = 0\n            }\n            setCurrentIndex(newIndex)\n            setShowSpanish(reviewIntervalIncrements[newIndex] !== 0)\n        } else if(index <= totalCompletedExamples && index >= 0) {\n            setCurrentIndex(newIndex)\n            setShowSpanish(reviewIntervalIncrements[newIndex] !== 0)\n        }\n    }\n\n    // redirects user to menu page\n    // called when user clicks 'Return to Main Menu'\n    function goBackToMenu(e) {\n        e.preventDefault()\n        const queryParams = new URLSearchParams(window.location.search)\n        const ut = queryParams.get('ut')\n        const link = 'https://nicholas7238.github.io/asqb/?ut=' + ut + '#/Menu'\n        \n        window.location.href=link\n    }\n\n    // called when user clicks arrow UP/DOWN or Review More/Review Less buttons\n    // changes rating increment on quickbase database\n    async function changeReviewIntervalIncrement(increment) {     \n        console.log('old Inc: ', filteredStudentExamples.current[currentIndex].reviewIntervalIncrement)\n        const newIncrement = increment\n        console.log('new Inc: ', newIncrement)\n        \n        filteredStudentExamples.current[currentIndex].reviewIntervalIncrement = newIncrement // ?\n\n        // make the update here & if its works then continue with the set\n        const queryParams = new URLSearchParams(window.location.search)\n        const ut = queryParams.get('ut')\n        const recordId = filteredStudentExamples.current[currentIndex].recordId\n        // Last Review Date\n        const today = new Date()\n        console.log('today: ', todaysDate.toISOString().substring(0, 10))\n        const lastReviewedDate = todaysDate.toISOString().substring(0, 10)\n        console.log('tyu: ', filteredStudentExamples.current[currentIndex].lastReviewedDate)\n        //\n        const reviewInterval = filteredStudentExamples.current[currentIndex].reviewInterval + newIncrement < 0 ? 0 : filteredStudentExamples.current[currentIndex].reviewInterval + newIncrement\n        // console.log('update params: ', n, recordId, lastReviewedDate, reviewInterval)\n        // console.log('current: ', filteredStudentExamples.current[currentIndex])\n        try {\n            // This where you make call to quickbase api to update table in order to change last review data & review interval\n            const updateInfo = await updateStudentExample(recordId, lastReviewedDate, reviewInterval, ut)\n            console.log('updateInfo: ', updateInfo)\n\n            if(reviewIntervalIncrements[currentIndex] === 0) {\n                setTotalCompletedExamples(totalCompletedExamples + 1)\n            }\n\n            setReviewIntervalIncrements(prevState => {\n                const newState = prevState.map(elem=>elem)\n                newState[currentIndex] = newIncrement\n                return newState\n            })\n            setShowSpanish(true)\n        } catch(err) {\n            console.log(err)\n        }\n    }\n\n    // called when user clicks space, shift, or clicks on Show Spanish button\n    // shows or hides Spanish sentence\n    function toggleShowSpanish() {\n        setShowSpanish(prevState => !prevState)\n    }\n\n    // key input\n    function handleKeyUp(e) {\n        e.preventDefault()\n        switch(e.keyCode) {\n            case 37: // left\n                changeCurrentIndex3(currentIndex-1, true)\n                break\n            case 38: // up\n                changeReviewIntervalIncrement(-1)\n                break\n            case 39: // right\n                changeCurrentIndex3(currentIndex+1, true)\n                break\n            case 40: // down\n                changeReviewIntervalIncrement(1)\n                break\n            case 32: // space\n                toggleShowSpanish()\n                break\n            case 16: // shift\n                toggleShowSpanish()\n                break\n        }\n    }\n\n    useEffect(() => {       \n        init() \n    }, [tables])\n\n    useEffect(() => {\n        window.addEventListener('keyup', handleKeyUp)    \n        return () => window.removeEventListener('keyup', handleKeyUp)\n    }, [currentIndex, reviewIntervalIncrements])\n\n    return (\n        <div className='quizInterface'>\n            <div style={{ textAlign: 'left' }} className='returnButton'><button style={{ fontSize: 'large', padding: '10px'}} onClick={(e) => goBackToMenu(e)}>Return to Main Menu</button></div>\n            {   \n                currentIndex === -1 ? (<div>Loading...</div>) : currentIndex < -1 ? (<div>There are no new practice sentences today</div>) : \n            <>\n            {/* Progress Bar */}\n            <div className='progressBarContainer'>\n                {/* <div className='progressBar'>\n                    <div style={{width: (100 * (currentIndex+1) / filteredStudentExamples.current.length) + '%'}} className='progress'>.</div>\n                </div> */}\n                <div className='progressBar2'>\n                    {filteredStudentExamples.current.map((stuEx, index) => {\n                        const color = index === currentIndex ? 'white' : 'black'\n                        let bgColor = reviewIntervalIncrements[index] === -1 ? 'crimson' : (reviewIntervalIncrements[index] === 1 ? 'lime' : (index === totalCompletedExamples ? 'slateGrey' : 'grey'))\n                        //console.log('revIntIncs: ', reviewIntervalIncrements)\n                        \n                        return(<div key={index} style={{width: (100 / filteredStudentExamples.current.length) - 1 + '%', borderColor: color, color: color, backgroundColor: bgColor}} className='progressBox' onClick={()=>changeCurrentIndex3(index, false)}>{index + 1}</div>)\n                    })}\n                    \n                </div>\n                <div className='progressBarDescription'>{totalCompletedExamples} of {filteredStudentExamples.current.length} completed</div>\n                {/* totalCompletedExamples == filteredStudentExamples.current.length ? (<button style={{ fontSize: 'large', padding: '10px' }} onClick={(e) => goBackToMenu(e)}>Return to Main Menu</button>) : (<div></div>) */}\n            </div>\n            \n            {/* English Example */}\n            <div className='englishTranslation'>{filteredStudentExamples.current[currentIndex].englishTranslation}</div>\n            {/* Spanish Example */}\n            <div className='spanishExample' onClick={()=>toggleShowSpanish()}>\n            { !showSpanish ? 'Show Spanish' : \n            filteredStudentExamples.current[currentIndex].spanishExample}\n            </div>\n\n            {/* Bottom buttons: Prev, Next, Review More, Review Less */}\n            <div className='buttonsContainer'>\n                <div><button className='buttonReviewMore' onClick={()=>changeReviewIntervalIncrement(-1)}>Review More ^</button></div>\n                <div>\n                    <button onClick={()=>changeCurrentIndex3(currentIndex-1, true)}>{'<-- Prev'}</button>\n                    {/* <button onClick={()=>handleReviewButton(-1)}>Review More ^</button> */}\n                    <button className='buttonReviewLess' onClick={()=>changeReviewIntervalIncrement(1)}>Review Less v</button>\n                    <button onClick={()=>changeCurrentIndex3(currentIndex+1, true)}>{'Next -->'}</button>\n                </div>\n            </div>\n            </>\n            }\n        </div>\n    )\n}\n","import React, {useState, useRef, useEffect, useCallback} from 'react'\nimport { qb } from './QuickbaseTablesInfo';\nimport { fetchAndCreateTable, updateStudentExample } from './QuickbaseFetchFunctions';\n\n// related student 8\n// related example 9\n// last reviewed date 6\n// review interval 7\n\n\n// This is a COPY/PASTE/EDIT of QuizInterface.js\n// the key differences are that this interface does not update the quickbase database when rating\n// and ignores the SRS logic & instead just randomly chooses 20 random questions regardless of the last review date.\n// changeCurrentIndex3() & retrieveExamplesByStudent() are the only different functions\nexport default function QuizInterfaceNoUpdate() {\n    const tables = useRef({ studentExamples: [], examples: [] })\n\n    const [currentIndex, setCurrentIndex] = useState(-1)\n    const [totalCompletedExamples, setTotalCompletedExamples] = useState(0)\n    const filteredStudentExamples = useRef([])\n    const [reviewIntervalIncrements, setReviewIntervalIncrements] = useState([])\n    const [showSpanish, setShowSpanish] = useState(false)\n    const todaysDate = new Date()\n\n    // this version retrieves a random set of 20, ignoring the last review date & SRS Logic\n    function retrieveExamplesByStudent(studentID, studentExamples, examples) {\n        const filteredByStudentID = studentExamples.filter(stuEx => stuEx.relatedStudent === studentID)\n        console.log('filteredByStudentID', filteredByStudentID)\n        const filteredByDateLogic = filteredByStudentID.filter(stuEx => {\n            const today = new Date()\n            const newDay = new Date(stuEx.lastReviewedDate)\n            newDay.setDate(newDay.getDate() + parseInt(Math.pow(2, stuEx.reviewInterval)))\n            return todaysDate >= newDay\n        })\n        console.log('filteredByDateLogic', filteredByDateLogic)\n        return filteredByStudentID // This is what causes the interface to ignore logic\n        return filteredByDateLogic\n    }\n\n    function randomize20(studentExamples) {\n        return shuffleArray(studentExamples).filter((stuEx, index)=>index<20)\n        //return studentExamples\n    }\n\n    function shuffleArray(arr) {        \n        const shuffledArr = [...arr]\n    \n        for(let i = shuffledArr.length; i > 0; i--) {\n            const newIndex = Math.floor(Math.random() * (i - 1))\n            const oldValue = shuffledArr[newIndex]\n            shuffledArr[newIndex] = shuffledArr[i - 1]\n            shuffledArr[i - 1] = oldValue\n        }\n    \n        return shuffledArr\n      }\n\n\n\n\n    async function init() { // gets user token & creates the student examples table\n        const queryParams = new URLSearchParams(window.location.search)\n        const ut = queryParams.get('ut')\n        let stuid = queryParams.get('stuid')\n        if(stuid === null) {\n            stuid = 2\n        } else {\n            stuid = parseInt(stuid)\n        }\n\n        console.log('stuid:  ', stuid)\n        \n        tables.current.studentExamples = await fetchAndCreateTable(ut, qb.studentExamples)\n        console.log('student examples')\n        tables.current.examples = await fetchAndCreateTable(ut, qb.examples)\n        console.log('example')\n\n        console.log('tables: ', tables.current)\n\n        filteredStudentExamples.current = randomize20(retrieveExamplesByStudent(stuid, tables.current.studentExamples, tables.current.examples))\n        console.log('length of filStuEx: ', filteredStudentExamples.current.length)\n\n        tables.current.examples.forEach(ex => \n            {\n                filteredStudentExamples.current.forEach(stuEx => {\n                    if(stuEx.relatedExample === ex.recordId) {\n                        stuEx.spanishExample = ex.spanishExample\n                        stuEx.englishTranslation = ex.englishTranslation\n                        stuEx.reviewIntervalIncrement = 0\n                    }\n                })\n            })\n        console.log('check', filteredStudentExamples.current)\n        if(filteredStudentExamples.current.length != 0) {\n            setReviewIntervalIncrements(filteredStudentExamples.current.map(stuEx => stuEx.reviewIntervalIncrement))\n            setCurrentIndex(0)\n            //window.addEventListener('keyup', handleKeyUp)\n        } else {\n            setCurrentIndex(-2)\n        }\n      }\n\n\n    // LEFT RIGHT arrow key\n    function changeCurrentIndex3(index, isIncrement) {\n        let newIndex = index\n        if(totalCompletedExamples == filteredStudentExamples.current.length) {\n            if(newIndex < 0) {\n                newIndex = filteredStudentExamples.current.length - 1\n            } else if(newIndex > filteredStudentExamples.current.length - 1) {\n                newIndex = 0\n            }\n            setCurrentIndex(newIndex)\n            setShowSpanish(reviewIntervalIncrements[newIndex] !== 0)\n        } else if(index <= totalCompletedExamples && index >= 0) {\n            setCurrentIndex(newIndex)\n            setShowSpanish(reviewIntervalIncrements[newIndex] !== 0)\n        }\n    }\n\n    function goBackToMenu(e) { // actually should be named go back to main menu\n        e.preventDefault()\n        const queryParams = new URLSearchParams(window.location.search)\n        const ut = queryParams.get('ut')\n        const link = 'https://nicholas7238.github.io/asqb/?ut=' + ut + '#/Menu'\n        \n        window.location.href=link\n    }\n\n    // arrow UP & DOWN\n    // does not update quickbase database\n    async function changeReviewIntervalIncrement(increment) {\n        \n        console.log('old Inc: ', filteredStudentExamples.current[currentIndex].reviewIntervalIncrement)\n        const newIncrement = increment\n\n        console.log('new Inc: ', newIncrement)\n        \n        filteredStudentExamples.current[currentIndex].reviewIntervalIncrement = newIncrement \n\n        // make the update here & if its works then continue with the set\n        const queryParams = new URLSearchParams(window.location.search)\n        const ut = queryParams.get('ut')\n        const n = filteredStudentExamples.current[currentIndex].reviewIntervalIncrement\n        const recordId = filteredStudentExamples.current[currentIndex].recordId\n        // Last Review Date\n        const today = new Date()\n        console.log('today: ', todaysDate.toISOString().substring(0, 10))\n        const lastReviewedDate = todaysDate.toISOString().substring(0, 10)\n        //const lastReviewedDate = filteredStudentExamples.current[currentIndex].lastReviewedDate\n        console.log('tyu: ', filteredStudentExamples.current[currentIndex].lastReviewedDate)\n        //\n        const reviewInterval = filteredStudentExamples.current[currentIndex].reviewInterval + newIncrement < 0 ? 0 : filteredStudentExamples.current[currentIndex].reviewInterval + newIncrement\n        // console.log('update params: ', n, recordId, lastReviewedDate, reviewInterval)\n        // console.log('current: ', filteredStudentExamples.current[currentIndex])\n        try {\n            // This is the code that would update quickbase database\n            //const updateInfo = await updateStudentExample(recordId, lastReviewedDate, reviewInterval, ut)\n            //console.log('updateInfo: ', updateInfo)\n\n            if(reviewIntervalIncrements[currentIndex] === 0) {\n                setTotalCompletedExamples(totalCompletedExamples + 1)\n            }\n\n            setReviewIntervalIncrements(prevState => {\n                const newState = prevState.map(elem=>elem)\n                newState[currentIndex] = newIncrement\n                return newState\n            })\n            setShowSpanish(true)\n        } catch(err) {\n            console.log(err)\n        }\n    }\n\n\n    function toggleShowSpanish() {\n        setShowSpanish(prevState => !prevState)\n    }\n\n    function handleKeyUp(e) {\n        e.preventDefault()\n        switch(e.keyCode) {\n            case 37: // left\n                changeCurrentIndex3(currentIndex-1, true)\n                break\n            case 38: // up\n                changeReviewIntervalIncrement(-1)\n                //setShowSpanish(true)\n                break\n            case 39: // right\n                changeCurrentIndex3(currentIndex+1, true)\n                break\n            case 40: // down\n                changeReviewIntervalIncrement(1)\n                //setShowSpanish(true)\n                break\n            case 32: // space\n                toggleShowSpanish()\n                break\n            case 13: // enter does not work\n                break\n            case 16: // shift\n                toggleShowSpanish()\n                break\n        }\n    }\n\n    useEffect(() => {       \n        init() \n    }, [tables])\n\n    useEffect(() => {\n        window.addEventListener('keyup', handleKeyUp)    \n        return () => window.removeEventListener('keyup', handleKeyUp)\n    }, [currentIndex, reviewIntervalIncrements])\n\n    return (\n        <div className='quizInterface' style={{'backgroundColor': '#033'}}>\n            \n            <div style={{ textAlign: 'left' }} className='returnButton'><button style={{ fontSize: 'large', padding: '10px'}} onClick={(e) => goBackToMenu(e)}>Return to Main Menu</button></div>\n            \n            {   \n                currentIndex === -1 ? (<div>Loading...</div>) : currentIndex < -1 ? (<div>There are no new practice sentences today</div>) : \n            <>\n            <div className='progressBarContainer'>\n                {/* <div className='progressBar'>\n                    <div style={{width: (100 * (currentIndex+1) / filteredStudentExamples.current.length) + '%'}} className='progress'>.</div>\n                </div> */}\n                <div className='progressBar2'>\n                    {filteredStudentExamples.current.map((stuEx, index) => {\n                        const color = index === currentIndex ? 'white' : 'black'\n                        let bgColor = reviewIntervalIncrements[index] === -1 ? 'crimson' : (reviewIntervalIncrements[index] === 1 ? 'lime' : (index === totalCompletedExamples ? 'slateGrey' : 'grey'))\n                        //console.log('revIntIncs: ', reviewIntervalIncrements)\n                        \n                        return(<div key={index} style={{width: (100 / filteredStudentExamples.current.length) - 1 + '%', borderColor: color, color: color, backgroundColor: bgColor}} className='progressBox' onClick={()=>changeCurrentIndex3(index, false)}>{index + 1}</div>)\n                    })}\n                    \n                </div>\n                <div className='progressBarDescription'>{totalCompletedExamples} of {filteredStudentExamples.current.length} completed</div>\n                {/* totalCompletedExamples == filteredStudentExamples.current.length ? (<button style={{ fontSize: 'large', padding: '10px' }} onClick={(e) => goBackToMenu(e)}>Return to Main Menu</button>) : (<div></div>) */}\n            </div>\n            \n            <div className='englishTranslation'>{filteredStudentExamples.current[currentIndex].englishTranslation}</div>\n            \n\n            <div className='spanishExample' onClick={()=>toggleShowSpanish()}>\n            { !showSpanish ? 'Show Spanish' : \n            filteredStudentExamples.current[currentIndex].spanishExample}\n            </div>\n            \n            <div className='buttonsContainer'>\n                <div><button className='buttonReviewMore' onClick={()=>changeReviewIntervalIncrement(-1)}>Review More ^</button></div>\n                <div>\n                    <button onClick={()=>changeCurrentIndex3(currentIndex-1, true)}>{'<-- Prev'}</button>\n                    {/* <button onClick={()=>handleReviewButton(-1)}>Review More ^</button> */}\n                    <button className='buttonReviewLess' onClick={()=>changeReviewIntervalIncrement(1)}>Review Less v</button>\n                    <button onClick={()=>changeCurrentIndex3(currentIndex+1, true)}>{'Next -->'}</button>\n                </div>\n            </div>\n            </>\n            }\n        </div>\n    )\n}\n","import React, {useState, useEffect, useRef} from 'react';\nimport { qb } from './QuickbaseTablesInfo';\nimport { fetchAndCreateTable, createStudentExample } from './QuickbaseFetchFunctions';\nimport './SRSBuilder.css'\n\n// This is a COPY/PASTE/EDIT of ExampleRetriever.js\n// The new functions are:\n// - setAllCheckedboxes()\n// - setOneCheckedbox()\n// - handleAddCheck()\n//\n// init() & the return <div> are also slighly different from ExampleRetriever.js's\n//\n// This script displays the SRS Builder, which is what user uses to add more examples to be used in SRS quiz tool\nexport default function SRSBuilder() {\n  const tables = useRef({ vocab: [], lessons: [], students: [], studentExamples: [] })\n  // vocab\n  const [filteredVocab, setFilteredVocab] = useState([])\n  const [customSearchVocab, setCustomSearchVocab] = useState([])\n  // examples\n  const [noSpanglish, setNoSpanglish] = useState(false)\n  const [shuffledSentences, setShuffledSentences] = useState(false)\n  const filteredExamples = useRef([])\n  const [displayExamples, setDisplayExamples] = useState([])\n\n  const [currentStudent, setCurrentStudent] = useState(3)\n  const [selectAll, setSelectAll] = useState(false)\n\n\n\n\n\n\n  function setAllCheckboxes(isChecked) {\n    const newDisplayExamples = displayExamples.map(ex=>{\n      ex.selected = isChecked\n      return ex\n    })\n    setSelectAll(!selectAll)\n    setDisplayExamples(newDisplayExamples)\n  }\n\n  function setOneCheckbox(isChecked, rid) {\n    const newDisplayExamples = displayExamples.map(ex=>{\n      ex.selected = ex.recordId === rid ? !ex.selected : ex.selected\n      return ex\n    })\n    if(selectAll) {\n      setSelectAll(false)\n    }\n    setDisplayExamples(newDisplayExamples)\n  }\n\n  // called when clicking 'Added checked sentences to student's SRS list' button\n  // creates new entry on student examples for every checked example for corresponding student\n  // also checks if example already exists, so it does not create duplicate\n  async function handleAddChecked() {\n    // console.log('display exs: ', displayExamples.map(ex=>ex.selected))\n    // const hace10m = new Date()\n    // hace10m.setMinutes(hace10m.getMinutes() - 10)\n    // if(hace10m < 0) {\n    //   //style is red\n    // }\n    // const today = new Date()\n    // console.log('today', today)\n    // today.setMinutes(today.getMinutes() - 10)\n    // console.log('today - 10', today)\n    // const day2 = tables.current.studentExamples[0].dateCreated\n    // const day3 = new Date(day2)\n    // console.log('day2: ', day2)\n    // console.log('day3: ', day3)\n    // const d4 = day3 + 100\n    // console.log('d4: ', d4)\n\n    // console.log('if: ', day3 < today)\n    // //newDay.setDate(newDay.getDate() + parseInt(Math.pow(2, stuEx.reviewInterval)))\n    // //return todaysDate >= newDay\n\n\n\n    //\n    const queryParams = new URLSearchParams(window.location.search)\n    const ut = queryParams.get('ut')\n\n    const hace2d = new Date()\n    hace2d.setDate(hace2d.getDate() - 2)\n    console.log('hace2d: ', hace2d)\n    const hace2dFormatted = hace2d.toISOString().substring(0, 10)\n    console.log('hace2dFormatted: ', hace2dFormatted)\n    await displayExamples.forEach(async (ex)=>{\n      if(ex.selected) {\n        \n        const exID = ex.recordId\n        const stuID = currentStudent\n        const lastReviewedDate = hace2dFormatted // yesterday's date\n        const reviewInterval = 0\n        console.log(exID, stuID, lastReviewedDate, reviewInterval)\n        if(tables.current.studentExamples.find(stuEx=>(stuEx.relatedExample===exID && stuEx.relatedStudent===stuID))) {\n          //\n          console.log('found')\n        } else {\n          console.log('not found')\n        \n          \n          //  \n          try {\n            const updateInfo = await createStudentExample(exID, stuID, lastReviewedDate, reviewInterval, ut)\n            console.log('updateInfo: ', updateInfo)\n            setAllCheckboxes(false)\n            setSelectAll(false)\n          } catch(err) {\n            console.log(err)\n          }\n        }\n      }\n    })\n  }\n\n\n\n  function retrieveCombinedLessonVocab(selectedLessonName, lessonsTable) {\n    const selectedSplitArr = selectedLessonName.split(' ')\n    const selectedNum = parseInt(selectedSplitArr.pop())\n    const selectedTitle = selectedSplitArr.join(' ')\n\n    let combinedLessonVocab = []\n    lessonsTable.forEach(lesson => {\n        const splitArr2 = lesson.lesson.split(' ')\n        const num2 = parseInt(splitArr2.pop())\n        if(lesson.lesson.includes(selectedTitle) && num2 <= selectedNum) {\n            combinedLessonVocab = [...combinedLessonVocab, ...lesson.vocabIncluded]\n        }\n    })\n    return combinedLessonVocab\n  }\n\n  function handleRetrieveSentencesOnClick(e) {\n    e.preventDefault()\n    const selectedLesson = e.target.firstChild.value\n    const filter1 = selectedLesson === '' ? tables.current.examples : filterExamplesStrict(retrieveCombinedLessonVocab(selectedLesson, tables.current.lessons), tables.current.examples)\n    const filter2 = filterExamplesLenient(customSearchVocab, filter1)\n    filteredExamples.current = filter2\n    filterExamplesHelper()\n  }\n\n  // checks if noSpanglish & shuffleSentences and then sets the displayExamples\n  function filterExamplesHelper() {\n    const filter2 = filteredExamples.current\n    const filter3 = noSpanglish ? filter2.filter(example => example.spanglish === 'esp') : filter2\n    const filter4 = shuffledSentences ? shuffleArray(filter3) : filter3\n    const filterSelected = filter4.map(ex=>{\n      ex.selected = false\n      return ex\n    })\n    console.log('filter selected: ', filterSelected)\n    setDisplayExamples(filterSelected)\n  }\n\n  function filterExamplesStrict(vocabArr, examplesTable) {\n    const filteredExamples = examplesTable.filter(example => {\n        if(example.vocabIncluded.length == 0) {\n            return false\n        }\n        for(const vocab of example.vocabIncluded) {\n            if(!vocabArr.includes(vocab)) {\n                return false\n            }\n        }\n        return true\n    })\n    return filteredExamples\n  }\n\n  function filterExamplesLenient(vocabArr, examplesTable) {\n      const filteredExamples = vocabArr.length === 0 ? examplesTable : examplesTable.filter(example => {\n          for(const parameterVocab of vocabArr) {\n              for(const exampleVocab of example.vocabIncluded) {\n                  if(exampleVocab.toLowerCase().includes(parameterVocab.toLowerCase())) {\n                      return true\n                  }\n              }\n          }\n          return false\n      })\n      return filteredExamples\n  }\n\n  function shuffleArray(arr) {        \n    const shuffledArr = [...arr]\n\n    for(let i = shuffledArr.length; i > 0; i--) {\n        const newIndex = Math.floor(Math.random() * (i - 1))\n        const oldValue = shuffledArr[newIndex]\n        shuffledArr[newIndex] = shuffledArr[i - 1]\n        shuffledArr[i - 1] = oldValue\n    }\n\n    return shuffledArr\n  }\n\n  function copySentences() {\n    const englishSentences = displayExamples.map(example => {\n        return example.englishTranslation\n    }).join('\\n')\n    const spanishSentences = displayExamples.map(example => {\n        return example.spanishExample\n    }).join('\\n')\n    //\n    const copiedText = englishSentences + '\\n\\n' + spanishSentences\n\n    //console.log(englishSentences)\n    navigator.clipboard.writeText(copiedText)\n  }\n\n  function copyTable() {\n    const headers = 'Spanish\\tEnglish\\n'\n    const table = displayExamples.map(example => {\n        return example.spanishExample + '\\t' + example.englishTranslation\n    }).join('\\n')\n\n    const copiedText = headers + table\n    navigator.clipboard.writeText(copiedText)\n  }\n\n\n\n  async function init() { // gets user token & creates the student examples table\n    const queryParams = new URLSearchParams(window.location.search)\n    const ut = queryParams.get('ut')\n\n    tables.current.students = await fetchAndCreateTable(ut, qb.students)\n    console.log('students')\n    tables.current.studentExamples = await fetchAndCreateTable(ut, qb.studentExamples)\n    console.log('student examples')\n    tables.current.vocab = await fetchAndCreateTable(ut, qb.vocabulary)\n    console.log('vocab')\n    tables.current.examples = await fetchAndCreateTable(ut, qb.examples)\n    console.log('example')\n    tables.current.lessons = await fetchAndCreateTable(ut, qb.lessons)\n    tables.current.lessons.sort((a, b)=>{\n      const splitArrA = a.lesson.split(' ')\n      const numA = parseInt(splitArrA.pop())\n      const titleA = splitArrA.join(' ')\n\n      const splitArrB = b.lesson.split(' ')\n      const numB = parseInt(splitArrB.pop())\n      const titleB = splitArrB.join(' ')\n\n      return titleA === titleB ? numA - numB : titleA - titleB\n    })\n    console.log('lessons')\n    //console.log('lessons: ', tables.current.lessons)\n    setFilteredVocab(tables.current.vocab)\n\n    //const lessons = [{name:'SI1M Lesson', length: 20}, {name:'AS Lesson', length: 12}]\n\n    //setLessonTitleSelect(createLessonsSelectOptions(lessons))\n\n    //const lessonsSelectOptions = createLessonsSelectOptions()\n\n    console.log(tables)\n  }\n\n  useEffect(() => {       \n    init() \n    //console.log(tables)       \n}, [tables])\n\n  useEffect(() => {\n    if(tables.current.lessons.length !== 0) {\n    filterExamplesHelper()\n    }\n  }, [noSpanglish, shuffledSentences])\n\n  return <div>\n      <div className='div-header'><h1 style={{'backgroundColor': 'darkCyan'}}>SRS Builder</h1></div>\n      <div className='div-vocab'>\n        {/* Top Left - Vocab search bar section */}\n        <div className='div-vocab-left'>\n          <div className='div-vocab-left-header'>    \n            <form onSubmit={(e) => {\n              e.preventDefault()\n              setCustomSearchVocab([...customSearchVocab, e.target.firstChild.value])\n              e.target.firstChild.value = ''\n              setFilteredVocab(tables.current.vocab)\n            }}>    \n              <input className='search' type='text' onChange={(e)=>setFilteredVocab(tables.current.vocab.filter(vocab => vocab.vocabName.toLowerCase().includes(e.target.value.toLowerCase())))}></input>\n              <button className='add-to-search-query'>Add to Search Query {'>>'} </button>\n            </form>\n          </div>\n          <ul className='suggestions'>\n            {filteredVocab.map((vocab, id) => {\n                return (<li key={id} onClick={(e) => setCustomSearchVocab([...customSearchVocab, vocab.vocabName])}>{vocab.vocabName}</li>)\n            })}\n          </ul>\n        </div>\n        {/* Top Right - Lesson filter & Retrieve Sentences Button section */}\n        <div className='div-vocab-right'>\n          <div className='div-vocab-right-header'>\n            <form onSubmit={(e)=>handleRetrieveSentencesOnClick(e)}>\n              <select className='lesson-select'>\n                <option value=''>No lesson filter</option>\n                {/*lessonTitleSelect.options.map((option, id) => (<option key={id} title={createLessonTitle(option)}>{option}</option>))*/\n                tables.current.lessons.map((lesson, id)=>(<option key={id} title={lesson.vocabIncluded.join('\\n')}>{lesson.lesson}</option>))\n                }\n              </select>\n              <button className='retrieve-sentences'>Retrieve Sentences</button>\n            </form>\n          </div>\n          <div>\n            {customSearchVocab.map((vocab, id) => (<button key={id} className='custom-vocab' onClick={(e)=>setCustomSearchVocab(customSearchVocab.filter(vocab=>vocab!==e.target.value))} value={vocab}>{vocab}</button>))}\n          </div>\n        </div>\n      </div>\n      {/* Middle - Example List */}\n      <div className='div-examples-header'>\n        <div>\n          <button onClick={copySentences}>Copy as List</button>\n          <button onClick={copyTable}>Copy as Table</button>\n          <input type='checkbox' name='spanglishCheckbox' onChange={(e) => setNoSpanglish(e.target.checked)}></input><label htmlFor='spanglishCheckbox'>No Spanglish? </label>\n          <input type='checkbox' name='shuffledCheckbox'  onChange={(e) => setShuffledSentences(e.target.checked)}></input><label htmlFor='shuffledCheckbox'>Shuffle Sentences? </label>\n        </div>\n        \n        <div>Num of Results: {displayExamples.length}</div>\n      </div>\n      <div className='div-examples'>\n        <table>\n          <thead>\n            <tr>\n                <th><input type='checkbox' onChange={(e)=>setAllCheckboxes(e.target.checked)} checked={selectAll}></input></th>\n              <th>Spanish</th>\n              <th>English</th>\n              <th>Vocab/Idioms</th>\n            </tr>\n          </thead>\n          <tbody>\n            { displayExamples.map((example, id) => {\n              return(<tr key={id}>\n                  {/* {example.selected?(<td><input type='checkbox' onChange={(e)=>setOneCheckbox(e.target.checked, example.recordId)} checked></input></td>):<td><input type='checkbox' onChange={(e)=>setOneCheckbox(e.target.checked, example.recordId)}></input></td>} */}\n                  <td><input type='checkbox' onChange={(e)=>setOneCheckbox(e.target.checked, example.recordId)} checked={example.selected}></input></td>\n                <td>{example.spanishExample}</td>\n                <td>{example.englishTranslation}</td>\n                <td>{example.vocabIncluded.map((vocab, id) => {\n                    return(<button key={id} className='vocab-included-button' disabled>{vocab}</button>)\n                })}</td>\n              </tr>)\n            })}\n          </tbody>\n        </table>\n      </div>\n      <div>_</div>\n      {/* Bottom - Student's examples section */}\n      <div className='div-examples-header'>\n          <div>\n          <button style={{'fontWeight': 'bold'}} onClick={()=>handleAddChecked()}>Add checked sentences to student's SRS list</button>\n          {/* <label style={{'fontSize': 'larger', 'color': 'darkCyan', 'fontWeight': 'bold'}}>SRS sentences of Student: </label> */}\n          <select style={{'padding': '8px'}} value={currentStudent} onChange={(e)=>setCurrentStudent(parseInt(e.target.value))}>\n              {tables.current.students.map((student, id) => (<option key={student.recordId} value={student.recordId}>{student.name}</option>))}\n          </select>\n          \n          </div>\n          <div>Num of student's current SRS sentences: {tables.current.studentExamples.filter(stuEx=>stuEx.relatedStudent === currentStudent).length}</div>\n      </div>\n      <div className='div-examples'>\n          <table>\n              <thead>\n                  <tr>\n                      <th>ID</th>\n                      <th>Spanish</th>\n                      <th>English</th>\n                      <th>Last Review Date</th>\n                      <th>Review Interval</th>\n                      <th>Date Created</th>\n                  </tr>\n              </thead>\n              <tbody>\n                  {tables.current.studentExamples.filter(stuEx=>stuEx.relatedStudent === currentStudent).map((stuEx, index)=> {\n                      const example = tables.current.examples.find(ex=>ex.recordId===stuEx.relatedExample)\n                      const hace10m = new Date()\n                      hace10m.setMinutes(hace10m.getMinutes() - 10)\n                      //hace10m.setDate(hace10m.getDate()-10)\n                      const exDateCreated = new Date(stuEx.dateCreated)\n                      let ridStyle = {}\n                      if(hace10m < exDateCreated) {\n                        //style is red\n                        ridStyle = {'color': '#d00'}\n                      }\n                      if(true) {\n                        //\n                      }\n                      return(<tr key={stuEx.recordId}>\n                        <td style={ridStyle}>{example.recordId}</td>  \n                        <td>{example.spanishExample}</td>\n                        <td>{example.englishTranslation}</td>\n                        <td>{stuEx.lastReviewedDate}</td>\n                        <td>{stuEx.reviewInterval}</td>\n                        <td>{stuEx.dateCreated.split('T')[0]}</td>\n                        </tr>)\n                  })}\n              </tbody>\n          </table>\n      </div>\n  </div>;\n}\n","import React, {useState, useEffect, useRef} from 'react';\nimport { qb } from './QuickbaseTablesInfo';\nimport { fetchAndCreateTable, getVocabFromBackend, getExamplesFromBackend, getLessonsFromBackend, getStudentsFromBackend} from './QuickbaseFetchFunctions';\nimport './App.css';\nimport ReactHowler from 'react-howler'\n\n\n\n\nexport default function SimpleQuizApp() {\n\n    function createStudentLoadingList () {\n        const loadingList = []\n        for (let i=0;i < 10;i++) {\n          loadingList.push({recordId: i, name: 'Loading Students...'})\n        }\n        return loadingList;\n      }\n\n    const loadingList = createStudentLoadingList()\n\n    const [loadStatus, setloadStatus] = useState([])\n    const tables = useRef({ examples: [], students: loadingList});\n    const [currentStudent, setCurrentStudent] = useState(tables.current.students[0].name);\n    const [quizReady,setQuizReady] = useState(false);\n    const [examplesToReview, setExamplesToReview] = useState ([])\n    const [currentExampleNumber, setCurrentExampleNumber] = useState(1)\n    const [languageShowing, setLanguageShowing] = useState('english')\n    const [playing, setPlaying] = useState(false)\n\n    function togglePlaying() {\n        console.log(`Playing: ${!playing}`)\n        if (playing) {\n            setPlaying(false)\n        } else {\n            setPlaying(true)\n        }\n        \n    }\n    \n    function toggleQuizReady() {\n        setLanguageShowing('english')\n        setPlaying(false)\n        if (quizReady) {\n            setQuizReady(false)\n            setCurrentExampleNumber(1)\n        } else {\n            setQuizReady(true)\n        }\n    }\n\n    function incrementExample() {\n        if (currentExampleNumber < examplesToReview.length){\n            setCurrentExampleNumber(currentExampleNumber+1)\n        } else {\n            setCurrentExampleNumber(examplesToReview.length)\n        }\n        setLanguageShowing('english')\n        setPlaying(false)\n    }\n    \n    function decrementExample() {\n        if (currentExampleNumber > 1){\n            setCurrentExampleNumber(currentExampleNumber-1)\n        } else {\n            setCurrentExampleNumber(1)\n        }\n        setLanguageShowing('english')\n        setPlaying(false)\n    }\n\n    async function toggleLanguageShowing () {\n        if (languageShowing === 'spanish'){\n            setLanguageShowing('english')\n            setPlaying(false)\n        } else {\n            setLanguageShowing('spanish')\n            setPlaying(false)\n        }\n    }\n\n    function filterByCurrentStudent (example) {\n        if (example.combinedTextStudentName.length === 0){\n            return false\n        }\n        //console.log('has students')\n        for(const student of example.combinedTextStudentName) {\n            if(example.combinedTextStudentName.includes(currentStudent)) {\n                return true\n            }\n        }\n        return false\n    }\n\n    function handleSetupQuiz () {\n        const quizExamples = tables.current.examples.filter(filterByCurrentStudent);\n        function randomize (array) {\n            const randomizedArray = []\n            const vanishingArray = [...array];\n            for (let i = 0; i < array.length; i++) {\n                const randIndex = Math.floor(Math.random()*vanishingArray.length)\n                const randomArrayItem = vanishingArray[randIndex]\n                vanishingArray.splice(randIndex, 1)\n                randomizedArray[i] = randomArrayItem\n                }\n            return randomizedArray\n        }\n        const randomizedQuizExamples = randomize(quizExamples);\n        setExamplesToReview(randomizedQuizExamples)\n        toggleQuizReady();\n    }\n\n    function goBackToMenu(e) {\n        e.preventDefault();\n        const link = '#/Menu/';\n        window.location=link;\n    }\n\n    const whichAudio = (languageShowing === 'spanish')?'spanishAudioLa':'englishAudio'\n\n    const currentAudioUrl = quizReady?examplesToReview[currentExampleNumber-1][whichAudio]:\"\"\n\n    async function init() {\n        console.log('init called')\n        tables.current.students = await getStudentsFromBackend();\n        tables.current.examples = await getExamplesFromBackend();\n        console.log('init completed')\n        setCurrentStudent(tables.current.students[0].name)\n        setloadStatus('loaded')\n      }\n\n    useEffect(() => {\n        init()\n    }, [])\n\n    \n\nreturn (\n    <div className='quizInterface'>\n        <div className='div-header'>\n            <h1>Quizzing App</h1>\n            <div className='returnButton'><button onClick={goBackToMenu}>{'< Back to Menu'}</button></div>\n        </div>\n\n        {/* Student Selector */}\n        <form style = {{display:quizReady?'none':'flex'}} onSubmit={handleSetupQuiz} className='studentSelect'>\n            <h2>Reviewing as:</h2>\n            <div>\n                <select onChange={(e)=>setCurrentStudent(e.target.value)}>\n                    {tables.current.students.map((student, id) => (<option key={id} value={student.name}>{student.name}</option>))}\n                {loadStatus}\n                </select>\n                <input type = 'submit' className='begin-review' value ='Begin Review'></input>\n            </div>\n        </form>\n        \n        {/* Quiz App */}\n        <div style = {{display:quizReady?'flex':'none'}} className='quiz'>\n            <div className='exampleBox'>\n                <div style = {{display:(languageShowing==='english')?'flex':'none'}} className='englishTranslation'>\n                    <p>{examplesToReview[currentExampleNumber-1]?examplesToReview[currentExampleNumber-1].englishTranslation:''}</p>\n                </div>\n                <div style = {{display:(languageShowing==='spanish')?'flex':'none'}}className='spanishExample' >\n                    <p>{examplesToReview[currentExampleNumber-1]?examplesToReview[currentExampleNumber-1].spanishExample:''}</p>\n                </div>\n                <ReactHowler src={(currentAudioUrl===\"\")?\"https://mom-academic.s3.us-east-2.amazonaws.com/dbexamples/example+1+spanish+LA.mp3\":currentAudioUrl} playing={playing} />\n                {console.log(currentAudioUrl)}\n                {console.log()}\n\n            </div>\n            <div className='buttonBox'>\n                <button onClick={decrementExample}>Previous Example</button>\n                <button style = {{display: (currentAudioUrl===\"\")? 'none' :'inherit'}} onClick = {togglePlaying}>Play/Pause Audio</button>\n                <button onClick={incrementExample}>Next Example</button>\n            </div>\n            <div className='buttonBox'>\n                <button onClick={toggleLanguageShowing}>Flip Card</button>\n                <button onClick={toggleQuizReady}>Restart Quiz</button>\n            </div>\n            <div className='progressBar2'>                \n                <div className='progressBarDescription'>Example {currentExampleNumber} of {examplesToReview.length}</div>\n            </div>\n        </div>\n    </div>\n        \n)}","import React from \"react\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\n\nconst LoginButton = () => {\n  const { loginWithRedirect } = useAuth0();\n\n  return <button onClick={() => loginWithRedirect()}>Log In</button>;\n};\n\nexport default LoginButton;","import React from \"react\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\n\nconst LogoutButton = () => {\n  const { logout } = useAuth0();\n\n  return (\n    <button onClick={() => logout({ logoutParams: { returnTo: window.location.origin } })}>\n      Log Out\n    </button>\n  );\n};\n\nexport default LogoutButton;","import './App.css';\nimport { BrowserRouter, HashRouter, Routes, Route, Navigate} from 'react-router-dom';\nimport React from 'react';\nimport ExampleRetriever from './ExampleRetriever';\nimport Menu from './Menu';\nimport QuizInterface from './QuizInterface';\nimport QuizInterfaceNoUpdate from './QuizInterfaceNoUpdate';\nimport SRSBuilder from './SRSBuilder';\nimport SimpleQuizApp from './SimpleQuizApp';\nimport LoginButton from './LoginButton';\nimport LogoutButton from './LogoutButton';\nimport { useAuth0 } from '@auth0/auth0-react';\n\nfunction App() {\n  const { user, isAuthenticated, isLoading } = useAuth0();\n  return (\n    <div className=\"App\">\n      <HashRouter>\n      <div className='div-header'>\n        <h1>LearnCraft Spanish</h1>\n        <LoginButton />\n        <LogoutButton />\n      </div>\n        {isAuthenticated && (<div>\n            <img src={user.picture} alt={user.name} />\n            <h2>{user.name}</h2>\n            <p>{user.email}</p>\n        </div>)}\n        <Routes>\n          <Route exact path='/ExampleRetriever' element={<ExampleRetriever />} />\n          <Route exact path='/SRSBuilder' element={<SRSBuilder />} />\n          <Route exact path='/QuizInterface' element={<QuizInterface />} />\n          <Route exact path='/QuizInterfaceNoUpdate' element={<QuizInterfaceNoUpdate />} />\n          <Route exact path='/Menu' element={<Menu /> } />\n          <Route exact path='/SimpleQuizApp' element = {<SimpleQuizApp />} />\n          <Route exact path='/' element = {<Navigate to ='/Menu'/>}/>\n        </Routes>\n      </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Auth0Provider } from \"@auth0/auth0-react\";\n\nconst root = ReactDOM.createRoot(document.getElementById('root'))\n\nroot.render(\n  <React.StrictMode>\n    <Auth0Provider\n    domain=\"dev-34nyaerydb7nt4yw.us.auth0.com\"\n    clientId=\"8EjjTUWQkoHPL1DvOfH1xePnqkZ0s8bO\"\n    authorizationParams={{\n      redirect_uri: window.location.origin,\n      audience: 'local-backend-test',\n      scope: 'openid email profile read:users '\n    }}\n  >\n      <App />\n    </Auth0Provider>\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}